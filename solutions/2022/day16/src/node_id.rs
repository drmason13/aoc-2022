#[cfg(test)]
#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum NodeId {
    AA,
    BB,
    CC,
    DD,
    EE,
    FF,
    GG,
    HH,
    II,
    JJ,
}

#[cfg(test)]
impl From<&str> for NodeId {
    fn from(s: &str) -> Self {
        match s {
            "AA" => NodeId::AA,
            "BB" => NodeId::BB,
            "CC" => NodeId::CC,
            "DD" => NodeId::DD,
            "EE" => NodeId::EE,
            "FF" => NodeId::FF,
            "GG" => NodeId::GG,
            "HH" => NodeId::HH,
            "II" => NodeId::II,
            "JJ" => NodeId::JJ,
            _ => panic!("valid input - unrecognised node id"),
        }
    }
}

#[cfg(not(test))]
#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum NodeId {
    AA,
    AG,
    AW,
    BM,
    BS,
    BU,
    BY,
    CB,
    CJ,
    CN,
    CR,
    DU,
    EQ,
    EV,
    FA,
    FB,
    FX,
    HB,
    HC,
    IS,
    IU,
    JO,
    JS,
    KO,
    KP,
    KY,
    LW,
    MU,
    MW,
    NG,
    NL,
    OE,
    OH,
    PM,
    QD,
    QM,
    RD,
    RG,
    RK,
    RP,
    SC,
    SX,
    TB,
    UA,
    VM,
    VT,
    WC,
    XA,
    XG,
    XJ,
    YO,
    YS,
    ZF,
    ZP,
}

#[cfg(not(test))]
impl From<&str> for NodeId {
    fn from(s: &str) -> Self {
        match s {
            "AA" => NodeId::AA,
            "AG" => NodeId::AG,
            "AW" => NodeId::AW,
            "BM" => NodeId::BM,
            "BS" => NodeId::BS,
            "BU" => NodeId::BU,
            "BY" => NodeId::BY,
            "CB" => NodeId::CB,
            "CJ" => NodeId::CJ,
            "CN" => NodeId::CN,
            "CR" => NodeId::CR,
            "DU" => NodeId::DU,
            "EQ" => NodeId::EQ,
            "EV" => NodeId::EV,
            "FA" => NodeId::FA,
            "FB" => NodeId::FB,
            "FX" => NodeId::FX,
            "HB" => NodeId::HB,
            "HC" => NodeId::HC,
            "IS" => NodeId::IS,
            "IU" => NodeId::IU,
            "JO" => NodeId::JO,
            "JS" => NodeId::JS,
            "KO" => NodeId::KO,
            "KP" => NodeId::KP,
            "KY" => NodeId::KY,
            "LW" => NodeId::LW,
            "MU" => NodeId::MU,
            "MW" => NodeId::MW,
            "NG" => NodeId::NG,
            "NL" => NodeId::NL,
            "OE" => NodeId::OE,
            "OH" => NodeId::OH,
            "PM" => NodeId::PM,
            "QD" => NodeId::QD,
            "QM" => NodeId::QM,
            "RD" => NodeId::RD,
            "RG" => NodeId::RG,
            "RK" => NodeId::RK,
            "RP" => NodeId::RP,
            "SC" => NodeId::SC,
            "SX" => NodeId::SX,
            "TB" => NodeId::TB,
            "UA" => NodeId::UA,
            "VM" => NodeId::VM,
            "VT" => NodeId::VT,
            "WC" => NodeId::WC,
            "XA" => NodeId::XA,
            "XG" => NodeId::XG,
            "XJ" => NodeId::XJ,
            "YO" => NodeId::YO,
            "YS" => NodeId::YS,
            "ZF" => NodeId::ZF,
            "ZP" => NodeId::ZP,
            // test node ids
            _ => panic!("valid input - unrecognised node id"),
        }
    }
}
